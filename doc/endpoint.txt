*endpoint.txt*     A Neovim plugin for finding API endpoints
*endpoint* *endpoint.nvim*

    ███████╗███╗   ██╗██████╗ ██████╗  ██████╗ ██╗███╗   ██╗████████╗
    ██╔════╝████╗  ██║██╔══██╗██╔══██╗██╔═══██╗██║████╗  ██║╚══██╔══╝
    █████╗  ██╔██╗ ██║██║  ██║██████╔╝██║   ██║██║██╔██╗ ██║   ██║
    ██╔══╝  ██║╚██╗██║██║  ██║██╔═══╝ ██║   ██║██║██║╚██╗██║   ██║
    ███████╗██║ ╚████║██████╔╝██║     ╚██████╔╝██║██║ ╚████║   ██║
    ╚══════╝╚═╝  ╚═══╝╚═════╝ ╚═╝      ╚═════╝ ╚═╝╚═╝  ╚═══╝   ╚═╝

Author:   zerochae <https://github.com/zerochae>
Repo:     https://github.com/zerochae/endpoint.nvim
License:  MIT

==============================================================================
CONTENTS                                                  *endpoint-toc*

    1. Introduction ................................ |endpoint-intro|
    2. Requirements ................................ |endpoint-requirements|
    3. Installation ................................ |endpoint-installation|
    4. Setup ....................................... |endpoint-setup|
    5. Usage ....................................... |endpoint-usage|
    6. Commands .................................... |endpoint-commands|
    7. Configuration ............................... |endpoint-config|
    8. Picker Options .............................. |endpoint-pickers|
    9. Framework Support ........................... |endpoint-frameworks|
    10. Troubleshooting ............................ |endpoint-troubleshooting|

==============================================================================
1. INTRODUCTION                                       *endpoint-intro*

endpoint.nvim is a powerful Neovim plugin for quickly finding and navigating
API endpoints across multiple web frameworks. It provides fast endpoint
discovery with multiple picker interfaces and smart caching capabilities.

Supported Frameworks:~
  • Spring Boot (Java) - @GetMapping, @PostMapping, @RequestMapping, etc.
  • Rails (Ruby) - Full controller actions and routes.rb parsing
  • Symfony (PHP) - @Route annotations and attributes
  • Express (Node.js) - app.method(), router.method(), and destructured patterns
  • NestJS (TypeScript/JavaScript) - @Get(), @Post(), @Controller(), etc.
  • FastAPI (Python) - @app.get(), @app.post(), @router.*, etc.
  • .NET Core (C#) - [HttpGet], [HttpPost], Minimal API (app.MapGet), endpoint routing
  • Ktor (Kotlin) - get(), post(), route() blocks with nested routing support
  • Java Servlet (Java) - doGet, doPost, @WebServlet annotations
  • React Router (Client-side) - <Route> components with smart component resolution

Features:~
  • 🔍 Multi-framework endpoint discovery (10 frameworks)
  • 🎯 Multiple picker interfaces (Telescope, vim.ui.select, Snacks)
  • ⚡ Smart caching with three modes (none, session, persistent)
  • 📍 Precise navigation to exact line where endpoints are defined
  • 🤖 Automatic framework detection
  • 🎨 Customizable icons, colors, and display options
  • 🏗️ Modern OOP architecture with unified framework handling
  • 🔧 Simple setup with minimal configuration

==============================================================================
2. REQUIREMENTS                                 *endpoint-requirements*

  • Neovim >= 0.8.0
  • ripgrep (https://github.com/BurntSushi/ripgrep) for fast searching
  • telescope.nvim (optional, only needed if using telescope picker)
  • snacks.nvim (optional, only needed if using snacks picker)

==============================================================================
3. INSTALLATION                                 *endpoint-installation*

lazy.nvim:~
>lua
    {
      "zerochae/endpoint.nvim",
      dependencies = {
        -- Choose one or more pickers (all optional):
        "nvim-telescope/telescope.nvim", -- For telescope picker
        "folke/snacks.nvim",            -- For snacks picker
        -- vim.ui.select picker works without dependencies
      },
      cmd = { "Endpoint" },
      config = function()
        require("endpoint").setup()
      end,
    }
<

packer.nvim:~
>lua
    use {
      "zerochae/endpoint.nvim",
      requires = {
        "nvim-telescope/telescope.nvim", -- Optional
        "folke/snacks.nvim"              -- Optional
      },
      config = function()
        require("endpoint").setup()
      end,
    }
<

==============================================================================
4. SETUP                                             *endpoint-setup*

                                                              *endpoint.setup()*
endpoint.setup({config})
    Configure endpoint.nvim with custom options.

    Parameters: ~
        {config} (table) Optional configuration table

    Usage: ~
>lua
        require("endpoint").setup({
          picker = {
            type = "telescope",
            options = {
              telescope = {},
            },
          },
          ui = {
            show_icons = true,
            show_method = true,
          },
        })
<

==============================================================================
5. USAGE                                             *endpoint-usage*

The plugin provides commands to find API endpoints by HTTP method:

Primary Commands:~
    :Endpoint              " Find all endpoints (same as :Endpoint All)
    :Endpoint Get          " Find all GET endpoints
    :Endpoint Post         " Find all POST endpoints
    :Endpoint Put          " Find all PUT endpoints
    :Endpoint Delete       " Find all DELETE endpoints
    :Endpoint Patch        " Find all PATCH endpoints
    :Endpoint Route        " Find route definitions (React Router)
    :Endpoint All          " Find all endpoints

Cache Management:~
    :Endpoint ClearCache   " Clear all cached data
    :Endpoint CacheStatus  " Show current cache statistics

Telescope Extension (when using telescope picker):~
    :Telescope endpoint        " All endpoints using Telescope interface
    :Telescope endpoint get    " GET endpoints in Telescope
    :Telescope endpoint post   " POST endpoints in Telescope
    :Telescope endpoint put    " PUT endpoints in Telescope
    :Telescope endpoint delete " DELETE endpoints in Telescope
    :Telescope endpoint patch  " PATCH endpoints in Telescope

==============================================================================
6. COMMANDS                                       *endpoint-commands*

                                                                      *:Endpoint*
:Endpoint [{method}]
    Main command for endpoint discovery.

    Parameters:~
        {method}  HTTP method: Get, Post, Put, Delete, Patch, Route, All,
                  ClearCache, or CacheStatus. Defaults to All if not specified.

    Examples:~
        :Endpoint              " Find all endpoints (default)
        :Endpoint Get          " Find GET endpoints only
        :Endpoint Post         " Find POST endpoints only
        :Endpoint Route        " Find React Router routes
        :Endpoint ClearCache   " Clear endpoint cache
        :Endpoint CacheStatus  " Show cache statistics

==============================================================================
7. CONFIGURATION                                   *endpoint-config*

Default Configuration:~
>lua
    require("endpoint").setup({
      -- Picker configuration
      picker = {
        type = "telescope",               -- "telescope", "vim_ui_select", "snacks"
        options = {
          telescope = {},                 -- Telescope-specific options
          snacks = {},                    -- Snacks-specific options
          vim_ui_select = {},             -- vim.ui.select-specific options
        },
      },

      -- UI configuration
      ui = {
        show_icons = true,                -- Show method icons
        show_method = true,               -- Show method text
        methods = {
          GET = { icon = "📥", color = "TelescopeResultsNumber" },
          POST = { icon = "📤", color = "TelescopeResultsConstant" },
          PUT = { icon = "✏️", color = "TelescopeResultsKeyword" },
          DELETE = { icon = "🗑️", color = "TelescopeResultsSpecialChar" },
          PATCH = { icon = "🔧", color = "TelescopeResultsFunction" },
          ROUTE = { icon = "🔗", color = "TelescopeResultsIdentifier" },
        },
      },
    })
<

Legacy Configuration (still supported):~
>lua
    require("endpoint").setup({
      picker = "telescope",             -- @deprecated: use picker.type
      picker_opts = {                   -- @deprecated: use picker.options
        telescope = { theme = "dropdown" },
      },
    })
<

Configuration Options:~

    picker.type (string): UI picker interface. Options:
        "telescope"     - Use Telescope interface (default)
        "vim_ui_select" - Use native vim.ui.select
        "snacks"        - Use Snacks.nvim picker

    picker.options (table): Picker-specific configuration options.
        telescope (table): Options passed to Telescope picker (themes, previewer, etc.)
        snacks (table): Options passed to Snacks.nvim picker (prompt, matcher, etc.)
        vim_ui_select (table): Options for vim.ui.select interface
        Default: { telescope = {}, snacks = {}, vim_ui_select = {} }

    ui.show_icons (boolean): Display method icons in the picker
        Default: true

    ui.show_method (boolean): Display method names in the picker
        Default: true

    ui.methods (table): Method-specific icon and color configuration
        Each method can have:
        - icon (string): Display icon for the method
        - color (string): Highlight group for coloring

==============================================================================
8. PICKER OPTIONS                               *endpoint-pickers*

The plugin supports multiple UI interfaces for endpoint selection:

Telescope Picker (Default):~
>lua
    require("endpoint").setup({
      picker = {
        type = "telescope",
        options = {
          telescope = { theme = "dropdown" },
        },
      },
    })
<
  • Rich fuzzy search interface
  • Preview window with syntax highlighting
  • Full Telescope keybinding support
  • Best for power users who use Telescope

Vim UI Select:~
>lua
    require("endpoint").setup({
      picker = {
        type = "vim_ui_select",
      },
    })
<
  • Native Neovim interface
  • Works without external dependencies
  • Integrates with vim.ui.select overrides (like dressing.nvim)
  • Lightweight and simple

Snacks Picker:~
>lua
    require("endpoint").setup({
      picker = {
        type = "snacks",
        options = {
          snacks = { preview = "file" },
        },
      },
    })
<
  • Modern picker interface using Snacks.nvim
  • File preview with precise line highlighting
  • Fuzzy matching with file position patterns (`file:line:col`)
  • Clean, fast interface

==============================================================================
9. FRAMEWORK SUPPORT                            *endpoint-frameworks*

Architecture:~

endpoint.nvim uses a modern Object-Oriented architecture with:
  • Framework: Base class for all framework implementations
  • Parser: Handles endpoint parsing specific to each framework
  • Detector: Unified detection system (integrated into Framework)
  • EndpointManager: Manages all registered frameworks

Framework Detection:~

The plugin automatically detects your framework based on:

  • Spring Boot: `pom.xml`, `build.gradle`, `build.gradle.kts`,
    `application.properties`, `application.yml`, `application.yaml`
  • Rails: `Gemfile`, `config/routes.rb`, `config/application.rb`, `app/controllers`
  • Symfony: `composer.json`, `composer.lock`, `config/services.yaml`, `config/routes.yaml`
  • Express: `package.json`, `server.js`, `app.js`, `index.js`
  • NestJS: `package.json`, `tsconfig.json`, `nest-cli.json`
  • FastAPI: `requirements.txt`, `pyproject.toml`, `setup.py`, `Pipfile`
  • .NET Core: `*.csproj`, `*.sln`, `global.json`, `appsettings.json`, `Program.cs`, `Startup.cs`
  • Ktor: `build.gradle`, `build.gradle.kts`, `pom.xml`
  • Java Servlet: `web.xml`, `WEB-INF/web.xml`, `src/main/webapp/WEB-INF/web.xml`, `pom.xml`, `build.gradle`
  • React Router: `package.json`, `tsconfig.json`, `src/`

Supported Patterns:~

  Spring Boot:~
    @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, @PatchMapping
    @RequestMapping with method parameters

  Rails:~
    Controller actions: get, post, put, delete, patch
    Route definitions: resources, resource, namespace, root
    Method definitions: def index, def show, def create, etc.

  Symfony:~
    Route attributes: #[Route(...methods...GET)], #[Route(...methods...POST)]
    Route annotations: @Route(...methods...GET), @Route(...methods...POST)
    DocBlock annotations: * @Route(...methods...GET)

  Express:~
    Method calls: app.get(), app.post(), router.get(), router.post()
    Destructured patterns: .get(), .post() (from destructured routers)

  NestJS:~
    Method decorators: @Get(), @Post(), @Put(), @Delete(), @Patch()
    Controller decorators: @Controller() with HttpCode combinations

  FastAPI:~
    App methods: @app.get, @app.post, @app.put, @app.delete, @app.patch
    Router methods: @router.get, @router.post, @router.put, @router.delete, @router.patch

  .NET Core:~
    HTTP attributes: [HttpGet], [HttpPost], [HttpPut], [HttpDelete], [HttpPatch]
    Minimal API: app.MapGet, app.MapPost, endpoints.MapGet, endpoints.MapPost
    Route attributes combined with HTTP attributes

  Ktor:~
    Route methods: get(), post(), put(), delete(), patch()
    Generic route calls with method parameters

  Java Servlet:~
    Servlet methods: doGet, doPost, doPut, doDelete, doPatch
    WebServlet annotations: @WebServlet

  React Router:~
    Route components: Route with path attributes
    Path definitions in JSX/TSX files

Adding New Frameworks:~

The plugin uses a modern OOP architecture. Each framework consists of:

1. Framework Class (inherits from base Framework)
2. Parser Class (inherits from base Parser)

Framework classes must be registered in EndpointManager.lua.

See wiki/Adding-New-Frameworks.md for detailed implementation guide.

==============================================================================
10. TROUBLESHOOTING                        *endpoint-troubleshooting*

Common Issues:~

Q: Plugin doesn't work after installation
A: Make sure you called `require("endpoint").setup()` in your config function.
   The plugin requires explicit setup to function properly.

Q: No endpoints found
A: Check that:
   • You're in a supported project directory
   • Source files contain the appropriate framework patterns
   • Framework is properly detected (check file patterns above)
   • Try running `:Endpoint ClearCache` to refresh

Q: Framework not detected
A: Verify detection files exist:
   • Spring: pom.xml, build.gradle, or application config files
   • Rails: Gemfile, config/routes.rb, or app/controllers/
   • Express: package.json with express dependency
   • Check EndpointManager registration for your framework

Q: Icons not displaying
A: Ensure:
   • `ui.show_icons = true` in configuration
   • Your terminal/font supports emoji icons
   • Try customizing icons in `ui.methods` if needed

Q: Wrong picker interface
A: Check your `picker.type` setting:
   • "telescope": requires telescope.nvim dependency
   • "vim_ui_select": works without external dependencies
   • "snacks": requires snacks.nvim dependency
   • Plugin will fall back to vim.ui.select if selected picker unavailable

Q: Performance issues with large projects
A: Consider:
   • Using more specific search patterns
   • Excluding unnecessary directories (node_modules, build, dist)
   • Optimizing ripgrep flags in framework search options

Debug Information:~
    View current config: `lua print(vim.inspect(require("endpoint").get_config()))`
    Check framework detection: `lua print(vim.inspect(require("endpoint.manager.EndpointManager"):new():get_detected_frameworks()))`
    Clear cache and retry: `:Endpoint ClearCache`
    Enable framework debugging: `lua vim.g.endpoint_debug = true`

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
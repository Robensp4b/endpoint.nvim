*endpoint.txt*     A Neovim plugin for finding API endpoints
*endpoint* *endpoint.nvim*

    ███████╗███╗   ██╗██████╗ ██████╗  ██████╗ ██╗███╗   ██╗████████╗
    ██╔════╝████╗  ██║██╔══██╗██╔══██╗██╔═══██╗██║████╗  ██║╚══██╔══╝
    █████╗  ██╔██╗ ██║██║  ██║██████╔╝██║   ██║██║██╔██╗ ██║   ██║   
    ██╔══╝  ██║╚██╗██║██║  ██║██╔═══╝ ██║   ██║██║██║╚██╗██║   ██║   
    ███████╗██║ ╚████║██████╔╝██║     ╚██████╔╝██║██║ ╚████║   ██║   
    ╚══════╝╚═╝  ╚═══╝╚═════╝ ╚═╝      ╚═════╝ ╚═╝╚═╝  ╚═══╝   ╚═╝   
                                                                     
Author:   zerochae <https://github.com/zerochae>
Repo:     https://github.com/zerochae/endpoint.nvim
License:  MIT

==============================================================================
CONTENTS                                                  *endpoint-toc*

    1. Introduction ................................ |endpoint-intro|
    2. Requirements ................................ |endpoint-requirements|
    3. Installation ................................ |endpoint-installation|
    4. Setup ....................................... |endpoint-setup|
    5. Usage ....................................... |endpoint-usage|
    6. Commands .................................... |endpoint-commands|
    7. Configuration ............................... |endpoint-config|
    8. Picker Options .............................. |endpoint-pickers|
    9. Caching ..................................... |endpoint-caching|
    10. Framework Support .......................... |endpoint-frameworks|
    11. Troubleshooting ............................ |endpoint-troubleshooting|

==============================================================================
1. INTRODUCTION                                       *endpoint-intro*

endpoint.nvim is a powerful Neovim plugin for quickly finding and navigating
API endpoints across multiple web frameworks. It provides fast endpoint 
discovery with multiple picker interfaces and smart caching capabilities.

Supported Frameworks:~
  • Spring Boot (Java) - @GetMapping, @PostMapping, @RequestMapping, etc.
  • NestJS (TypeScript/JavaScript) - @Get(), @Post(), @Controller(), etc.
  • Symfony (PHP) - @Route annotations and attributes
  • FastAPI (Python) - @app.get(), @app.post(), @router.*, etc.
  • Rails (Ruby) - Full controller actions and routes.rb parsing
  • Express (Node.js) - app.method(), router.method(), and destructured patterns
  • React Router (Client-side) - <Route> components with smart component resolution

Features:~
  • 🔍 Multi-framework endpoint discovery
  • 🎯 Multiple picker interfaces (Telescope, vim.ui.select, Snacks)
  • ⚡ Smart caching with three modes (none, session, persistent)
  • 📍 Precise navigation to exact line where endpoints are defined
  • 🤖 Automatic framework detection
  • 🎨 Customizable icons, colors, and display options
  • 💎 Rails support with customizable display formats
  • 🔧 Simple setup with minimal configuration

==============================================================================
2. REQUIREMENTS                                 *endpoint-requirements*

  • Neovim >= 0.8.0
  • ripgrep (https://github.com/BurntSushi/ripgrep) for fast searching
  • telescope.nvim (optional, only needed if using telescope picker)

==============================================================================
3. INSTALLATION                                 *endpoint-installation*

lazy.nvim:~
>lua
    {
      "zerochae/endpoint.nvim",
      dependencies = {
        "nvim-telescope/telescope.nvim", -- Optional: only if using telescope picker
      },
      cmd = { "Endpoint" },
      config = function()
        require("endpoint").setup()
      end,
    }
<

packer.nvim:~
>lua
    use {
      "zerochae/endpoint.nvim", 
      requires = { "nvim-telescope/telescope.nvim" }, -- Optional
      config = function()
        require("endpoint").setup()
      end,
    }
<

==============================================================================
4. SETUP                                             *endpoint-setup*

                                                              *endpoint.setup()*
endpoint.setup({config})
    Configure endpoint.nvim with custom options.

    Parameters: ~
        {config} (table) Optional configuration table

    Usage: ~
>lua
        require("endpoint").setup({
          cache_mode = "none",
          picker = "telescope",
          ui = {
            show_icons = true,
            show_method = true,
          },
        })
<

==============================================================================
5. USAGE                                             *endpoint-usage*

The plugin provides commands to find API endpoints by HTTP method:

Primary Commands:~
    :Endpoint Get          " Find all GET endpoints
    :Endpoint Post         " Find all POST endpoints  
    :Endpoint Put          " Find all PUT endpoints
    :Endpoint Delete       " Find all DELETE endpoints
    :Endpoint Patch        " Find all PATCH endpoints
    :Endpoint Route        " Find route definitions (React Router)
    :Endpoint All          " Find all endpoints (default)

Cache Management:~
    :Endpoint ClearCache   " Clear all cached data
    :Endpoint CacheStatus  " Show current cache statistics

Telescope Extension (when using telescope picker):~
    :Telescope endpoint        " All endpoints using Telescope interface
    :Telescope endpoint get    " GET endpoints in Telescope
    :Telescope endpoint post   " POST endpoints in Telescope
    :Telescope endpoint put    " PUT endpoints in Telescope
    :Telescope endpoint delete " DELETE endpoints in Telescope  
    :Telescope endpoint patch  " PATCH endpoints in Telescope

==============================================================================
6. COMMANDS                                       *endpoint-commands*

                                                                      *:Endpoint*
:Endpoint [{method}]
    Main command for endpoint discovery.
    
    Parameters:~
        {method}  HTTP method: Get, Post, Put, Delete, Patch, All, 
                  ClearCache, or CacheStatus. Defaults to All if not specified.
    
    Examples:~
        :Endpoint              " Find all endpoints (default)
        :Endpoint Get          " Find GET endpoints only
        :Endpoint Post         " Find POST endpoints only
        :Endpoint ClearCache   " Clear endpoint cache
        :Endpoint CacheStatus  " Show cache statistics

==============================================================================
7. CONFIGURATION                                   *endpoint-config*

Default Configuration:~
>lua
    require("endpoint").setup({
      cache_mode = "none",                      -- "none", "session", "persistent"
      picker = "telescope",                     -- "telescope", "vim_ui_select", "snacks"
      picker_opts = {},                         -- Additional picker options (Telescope only)
      
      ui = {
        show_icons = true,                      -- Show method icons
        show_method = true,                     -- Show method text
        
        method_icons = {
          GET = "📥", POST = "📤", PUT = "✏️", 
          DELETE = "🗑️", PATCH = "🔧",
        },
        
        method_colors = {
          GET = "TelescopeResultsNumber",
          POST = "TelescopeResultsConstant", 
          PUT = "TelescopeResultsKeyword",
          DELETE = "TelescopeResultsSpecialChar",
          PATCH = "TelescopeResultsFunction",
        },
      },
      
      -- Framework-specific configuration
      frameworks = {
        rails = {
          display_format = "smart", -- "action_only", "controller_action", "smart"
          show_action_annotation = true, -- Show [controller#action] annotations
        },
      },
    })
<

Configuration Options:~

    cache_mode (string): Cache behavior mode. Options:
        "none"      - Real-time search with no caching (default)
        "session"   - Cache valid until nvim closes
        "persistent" - Cache saved to disk, persists across sessions
    
    picker (string): UI picker interface. Options:
        "telescope"     - Use Telescope interface (default)
        "vim_ui_select" - Use native vim.ui.select
        "snacks"        - Use Snacks.nvim picker
    
    picker_opts (table): Additional options passed to picker.
        Note: Only effective when using Telescope picker
        Default: {}
    
    frameworks.rails.display_format (string): Rails route display format. Options:
        "action_only"      - Show only action name (GET[#index] /users)
        "controller_action" - Show controller#action (GET[users#index] /users) 
        "smart"            - Smart formatting (GET[home#index] /, GET[users#index] /users)
        Default: "smart"
        
    frameworks.rails.show_action_annotation (boolean): Show controller#action annotations.
        true  - Show annotations like GET[users#index] /users (default)
        false - Hide annotations, show clean format like GET /users

==============================================================================
8. PICKER OPTIONS                               *endpoint-pickers*

The plugin supports multiple UI interfaces for endpoint selection:

Telescope Picker (Default):~
>lua
    require("endpoint").setup({
      picker = "telescope",
    })
<
  • Rich fuzzy search interface
  • Preview window with syntax highlighting
  • Full Telescope keybinding support
  • Best for power users who use Telescope

Vim UI Select:~
>lua
    require("endpoint").setup({
      picker = "vim_ui_select",
    })
<
  • Native Neovim interface
  • Works without external dependencies
  • Integrates with vim.ui.select overrides (like dressing.nvim)
  • Lightweight and simple

Snacks Picker (In Development):~
>lua
    require("endpoint").setup({
      picker = "snacks", -- Coming soon
    })
<
  • Modern picker interface using Snacks.nvim
  • Currently in development

==============================================================================
9. CACHING                                        *endpoint-caching*

The plugin includes an intelligent caching system with three modes:

Cache Modes:~
>lua
    {
      cache_mode = "none", -- Cache mode: "none", "session", or "persistent"
    }
<

    "none" (default):
        Real-time search with no caching - always returns the most up-to-date
        results. Use if you frequently add/modify endpoints during development.
        
    "session": 
        Cache remains valid until nvim is closed. Good balance of performance
        and freshness for moderate-sized projects.
        
    "persistent":
        Cache is saved to disk and persists across nvim sessions. Best 
        performance for large, stable projects where endpoint changes are infrequent.

Cache Management:~
    :Endpoint ClearCache   " Clear all cached data
    :Endpoint CacheStatus  " Show current cache statistics

The `:Endpoint CacheStatus` command shows current cache information including:
  • Cache mode (none, session, or persistent)
  • Number of cached endpoints by method
  • Cache timestamps and statistics

When to use each cache mode:
  • None: ✅ Small projects, ✅ Frequently changing endpoints, ❌ Large projects
  • Session: ✅ Medium projects, ✅ Balance of performance and freshness, ✅ Most use cases  
  • Persistent: ✅ Large projects, ✅ Stable endpoints, ❌ Frequently changing code

==============================================================================
10. FRAMEWORK SUPPORT                            *endpoint-frameworks*

Framework Detection:~

The plugin automatically detects your framework based on these files:

  • Spring Boot: `pom.xml`, `build.gradle`, `build.gradle.kts`, 
    `application.properties`, `application.yml`
  • NestJS: `package.json` (with @nestjs dependencies), `nest-cli.json`
  • Symfony: `composer.json` (with symfony framework), `symfony.lock`
  • FastAPI: `main.py`, `requirements.txt` (with FastAPI)
  • Rails: `Gemfile`, `config/routes.rb`, `config/application.rb`, `app/controllers`
  • Express: `package.json` (with express dependency)
  • React Router: `package.json` (with react-router or react-router-dom)

Adding New Frameworks:~

The plugin uses a simple framework-based architecture. Each framework is
implemented as a separate Lua module in `lua/endpoint/frameworks/`.

Framework modules must implement:
>lua
    -- Framework detection
    function M.detect()
      -- Return true if framework is detected in current directory
    end
    
    -- Generate search command for method
    function M.get_search_cmd(method)
      -- Return ripgrep command to find endpoints
    end
    
    -- Parse search results
    function M.parse_line(line)
      -- Parse ripgrep output line and return endpoint data
    end
<

See the README for detailed examples of adding new framework support.

==============================================================================
11. TROUBLESHOOTING                        *endpoint-troubleshooting*

Common Issues:~

Q: Plugin doesn't work after installation
A: Make sure you called `require("endpoint").setup()` in your config function.
   The plugin requires explicit setup to function properly.

Q: No endpoints found
A: Check that:
   • You're in a supported project (Spring Boot, NestJS, Symfony, FastAPI, Rails, Express, React Router)
   • Source files contain the appropriate patterns:
     - Spring Boot: @GetMapping, @PostMapping, @RequestMapping, etc.
     - NestJS: @Get(), @Post(), @Controller(), etc.
     - Rails: Controller files in app/controllers/ or routes in config/routes.rb
     - React Router: <Route> components in .js/.jsx/.ts/.tsx files
   • Try running `:Endpoint ClearCache` to refresh the cache

Q: Cache not working as expected  
A: Verify your `cache_mode` setting:
   • "none": no caching, always searches in real-time
   • "session": cache until nvim closes  
   • "persistent": cache saved to disk
   Use `:Endpoint CacheStatus` to check current cache state.

Q: Icons not displaying
A: Ensure:
   • `show_icons = true` in ui configuration
   • Your terminal/font supports emoji icons
   • Try setting custom icons in `method_icons` if needed

Q: Wrong picker interface
A: Check your `picker` setting:
   • "telescope": requires telescope.nvim dependency
   • "vim_ui_select": works without external dependencies
   • "snacks": requires snacks.nvim dependency
   • Plugin will fall back to vim.ui.select if selected picker is not available

Q: Rails endpoints not displaying correctly
A: Configure Rails display format in your setup:
   • Use `display_format = "smart"` for smart root route formatting
   • Use `display_format = "controller_action"` to always show controller#action  
   • Set `show_action_annotation = false` for clean display without annotations
   • Example: `frameworks = { rails = { display_format = "smart" } }`

Debug Information:~
    View current config: `lua print(vim.inspect(require("endpoint").get_config()))`
    Check cache status: `:Endpoint CacheStatus`
    Clear cache and retry: `:Endpoint ClearCache`

==============================================================================
vim:tw=78:ts=8:ft=help:norl: